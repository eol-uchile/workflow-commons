# WF version: 2.0.0

name: Test Python with badge

on:
  workflow_call:
    secrets:
      private_key:
        required: false
    inputs:
      app_id:
        required: false
        type: string
      django-cms:
        required: true
        type: boolean
      django-lms:
        required: true
        type: boolean
      platform-eol:
        required: true
        type: boolean
      platform-openuchile:
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    name: 
    steps:
      - name: Ensure credentials (only on GH Actions)
        if: ${{ !env.ACT }}
        run: |
          if [ -z "${{ inputs.app_id }}" ] || [ -z "${{ secrets.private_key }}" ]; then
            echo "Missing inputs.app_id or secrets.private_key"
            exit 1
          fi

      - name: Create GitHub App Token
        id: app_token
        if: ${{ !env.ACT }}
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ inputs.app_id}}
          private-key: ${{ secrets.private_key }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Checkout
        if: ${{ !env.ACT }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: 'recursive'
          token: ${{ steps.app_token.outputs.token }}

      - name: Download test scripts
        run: |
          mkdir wf_tmp
          wget https://raw.githubusercontent.com/eol-uchile/workflow-commons/files-1.0.0/pythonapp/docker-compose.yml -O wf_tmp/docker-compose.yml 
          wget https://raw.githubusercontent.com/eol-uchile/workflow-commons/files-1.0.0/pythonapp/test.sh -O wf_tmp/test.sh
          chmod +x wf_tmp/test.sh

      - name: Run Tests - LMS EOL
        if: ${{ inputs.platform-eol == true && inputs.django-lms == true }}
        run: |
          cd wf_tmp
          docker compose run --rm \
            -e SERVICE_VARIANT='lms' \
            -e DJANGO_SETTINGS_MODULE='lms.envs.test' \
            -e STATIC_ROOT_LMS='/openedx/staticfiles/' \
            -e STATIC_ROOT_CMS='/openedx/staticfiles/studio/' \
            lms-eol /openedx/requirements/app/wf_tmp/test.sh

      - name: Run Tests - LMS OpenUChile
        if: ${{ inputs.platform-openuchile == true && inputs.django-lms == true }}
        run: |
          cd wf_tmp
          docker compose run --rm \
            -e SERVICE_VARIANT='lms' \
            -e DJANGO_SETTINGS_MODULE='lms.envs.test' \
            -e STATIC_ROOT_LMS='/openedx/staticfiles/' \
            -e STATIC_ROOT_CMS='/openedx/staticfiles/studio/' \
            lms-openuchile /openedx/requirements/app/wf_tmp/test.sh

      - name: Run Tests - CMS EOL
        if: ${{ inputs.platform-eol == true && inputs.django-cms == true }}
        run: |
          cd wf_tmp
          docker compose run --rm \
            -e SERVICE_VARIANT='cms' \
            -e DJANGO_SETTINGS_MODULE='cms.envs.test' \
            -e STATIC_ROOT_LMS='/openedx/staticfiles/' \
            -e STATIC_ROOT_CMS='/openedx/staticfiles/studio/' \
            cms-eol /openedx/requirements/app/wf_tmp/test.sh

      - name: Run Tests - CMS OpenUChile
        if: ${{ inputs.platform-openuchile == true && inputs.django-cms == true }}
        run: |
          cd wf_tmp
          docker compose run --rm \
            -e SERVICE_VARIANT='cms' \
            -e DJANGO_SETTINGS_MODULE='cms.envs.test' \
            -e STATIC_ROOT_LMS='/openedx/staticfiles/' \
            -e STATIC_ROOT_CMS='/openedx/staticfiles/studio/' \
            cms-openuchile /openedx/requirements/app/wf_tmp/test.sh
          
      - name: Clean Tests
        run: |
          cd wf_tmp/
          docker compose down
          cd ..
          rm -Rf wf_tmp/

      - name: Configure Git
        run: |
          git config user.name "eolito[bot]"
          git config user.email "217098583+eolito[bot]@users.noreply.github.com"

      - name: Commit badge if changed
        if: ${{ !env.ACT && startsWith(github.ref, 'refs/heads/eol-release/') }}
        run: |
          if [ "$(git status --porcelain coverage-badge.svg)" != "" ]
          then
            git diff coverage-badge.svg
            git add coverage-badge.svg
            git commit --cleanup=verbatim -m $'chore: Auto-generate coverage badge\n\nskip-checks: true'
            git push
          else
            echo "No changes to coverage badge. Skipping commit step."
          fi
